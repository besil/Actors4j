{"name":"Actors4j","tagline":"A lightweight, simple and performant library for Actors in Java","body":"# actors4j\r\nA lightweight, simple and efficient thread message passing library for Java.\r\n\r\nInspired by Akka, designed for Java.\r\n\r\n## Quickstart\r\n\r\nDefine your messages\r\n\r\n```java\r\nclass Ping extends ActorMessageWithSender {\r\n\tpublic Ping(PingActor pingActor) {\r\n\t\tsuper(pingActor);\r\n\t}\r\n\t\r\n}\r\n\t\r\nclass Pong extends ActorMessageWithSender {\r\n\tpublic Pong(PongActor pongActor) {\r\n\t\tsuper(pongActor);\r\n\t}\r\n}\r\n\t\r\nclass StartMex implements ActorMessage {\r\n\tprivate Actor other;\r\n\tpublic StartMex(Actor other) {\r\n\t\tthis.other = other;\r\n\t}\r\n\tpublic Actor getOther() {\r\n\t\treturn other;\r\n\t}\r\n}\r\n```\r\n\r\nDefine your actors\r\n```java\r\nclass PingActor extends LocalActor {\r\n\tint pingCount = 0;\r\n\tpublic void receive(StartMex start) {\r\n\t\tpingCount++;\r\n\t\tlog.info(\"Ping\");\r\n\t\tstart.getOther().send(new Ping(this));\r\n\t}\r\n\tpublic void receive(Pong pong) throws InterruptedException {\r\n\t\tlog.info(\"Ping\");\r\n\t\tThread.sleep(1000);\r\n\t\tpong.getSender().send(new Ping(this));\r\n\t}\r\n}\r\n\r\nclass PongActor extends LocalActor {\r\n\tint pongCount = 0;\r\n\tpublic void receive(Ping ping) throws InterruptedException {\r\n\t\tpongCount++;\r\n\t\tlog.info(\"Pong\");\r\n\t\tThread.sleep(1000);\r\n\t\tping.getSender().send(new Pong(this));\r\n\t}\r\n}\r\n```\r\n\r\nUse them!\r\n\r\n```java\r\nPingActor pinger = new PingActor();\r\nPongActor ponger = new PongActor();\r\n\r\npinger.start();\r\nponger.start();\r\n\r\npinger.send(new StartMex(ponger));\r\n\r\ntry {\r\n\tThread.sleep(10000);\r\n} catch (InterruptedException e) {\r\n\te.printStackTrace();\r\n}\r\n\r\nassertTrue(pinger.pingCount > 0);\r\nassertTrue(ponger.pongCount > 0);\r\n\r\npinger.shutdown();\r\nponger.shutdown();\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}